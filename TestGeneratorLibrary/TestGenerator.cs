using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestGeneratorLibrary
{
    public class TestGenerator
    {
        private static AttributeSyntax TestMethodAttribute = SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestMethod"));

        private static AttributeSyntax TestClassAttribute = SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestClass"));

        public TestInfo[] Generate(string content)
        {
            List<TestInfo> generatedTests = new List<TestInfo>();

            SyntaxNode treeRoot = CSharpSyntaxTree.ParseText(content).GetRoot();

            foreach (var userClass in treeRoot.DescendantNodes().OfType<ClassDeclarationSyntax>())
            {

                //structure of classFile:
                //Usings
                //namespace
                //className
                //Setup Method
                //Test methods for all public methods

                string className = userClass.Identifier.ValueText;

                NamespaceDeclarationSyntax currentNamespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName("UnitTests"));

                ClassDeclarationSyntax classSignature = SyntaxFactory.ClassDeclaration($"{className}Test").
                    AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword)).
                    AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(TestClassAttribute)));

                var classMethods = userClass.DescendantNodes().OfType<MethodDeclarationSyntax>().Where(method => method.Modifiers.Any(SyntaxKind.PublicKeyword));
                List<MethodDeclarationSyntax> generatedMethods = new List<MethodDeclarationSyntax>();

                foreach(var method in classMethods)
                    generatedMethods.Add(CreateMethod($"Test{method.Identifier.ValueText}"));

                var classCode = SyntaxFactory.CompilationUnit().
                    AddUsings(CreateUsings(treeRoot)).
                    AddMembers(currentNamespace.
                    AddMembers(classSignature.
                    AddMembers(generatedMethods.ToArray())));


                generatedTests.Add(new TestInfo(className, classCode.NormalizeWhitespace().ToFullString()));
            }


            return generatedTests.ToArray();
        }


        private UsingDirectiveSyntax[]  CreateUsings(SyntaxNode root)
        {
            string classNamespace = root.DescendantNodes().OfType<NamespaceDeclarationSyntax>().Single().Name.ToString();
           
            return root.DescendantNodes().OfType<UsingDirectiveSyntax>().              
                Append(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(classNamespace))).
                Append(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting"))).
                ToArray();
        }

        private MethodDeclarationSyntax CreateMethod( string methodName)
        {
            MethodDeclarationSyntax method = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), methodName).
                AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword)).
                AddBodyStatements(SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");")).
                AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(TestMethodAttribute)));

            return method;
        }

    }











}
